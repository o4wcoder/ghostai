uniform float2 iResolution;
uniform float iTime;

float hash(float2 p) {
    return fract(sin(dot(p, float2(127.1, 311.7))) * 43758.5453123);
}

float noise(float2 p) {
    float2 i = floor(p);
    float2 f = fract(p);

    float a = hash(i);
    float b = hash(i + float2(1.0, 0.0));
    float c = hash(i + float2(0.0, 1.0));
    float d = hash(i + float2(1.0, 1.0));

    float2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

float fbm(float2 p) {
    float v = 0.0;
    float a = 0.5;
    float2 shift = float2(100.0);
    for (int i = 0; i < 5; ++i) {
        v += a * noise(p);
        p = p * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}

half4 main(float2 fragCoord) {
    float2 uv = fragCoord / iResolution;

    // Move the noise field diagonally over time
    float2 p = uv * 3.0;
    p += float2(iTime * 0.02, iTime * 0.015);

    float mist = fbm(p);

    // Fade mist in rolling bands to create pulsing wisps
    float pulse = 0.5 + 0.5 * sin(iTime + uv.y * 10.0 + mist * 5.0);
    float alpha = smoothstep(0.4, 0.6, mist) * pulse * 0.3;

    return half4(0.85, 0.85, 0.85, alpha); // Soft gray mist
}
